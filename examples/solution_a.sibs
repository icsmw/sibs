@import ./common.sibs;
@import ./tasks.sibs;

#[app: ./app]
    build($mode: dev | prod)[
        
    ]

#[app: ./app]
    /// Application
    @hash 
        [./src; ./dist; :client; :shared; :wrapper]
        [build(dev)];
    custom($input: {string}) [
        ...
    ]
    build($mode: dev | prod; $target: win | linux) [
        ...
    ]
    build($mode: dev | prod) [
        /// Building electron application 
        /// $mode
        /// [dev] build developing version
        /// [prod] build production version
        $dev = @envvar DEV_MODE;
        @cd ./some_folder;
        @cd ..;
        @remove? ./node_modules/shared;
        @remove? ./node_modules/wrapper;
        @remove? ./dist/client;
        :shared:prod;
        @copy ../shared ./node_modules;
        :wrapper:prod;
        @copy ../core/wrapper ./node_modules;
        $mode == dev => :client:build(dev);
        $mode == prod => :client:build(prod);
        @copy ../client/dist/client ./dist;
        yarn run build;
        @copy ./package.json ./dist;
    ]
    release($mode: dev | prod) [
        /// Build release artifacts
        /// $mode
        /// [dev] build developing version
        /// [prod] build production version
        :self:build($mode);
        @os window => yarn run build-win;
        @os linux => yarn run build-linux;
        @os darwin => yarn run build-darwin;
    ]
    distribution [
        /// Name and compress release artifacts
        $version = @read_as_string ./package.json > @find /"version": "([\d\.])"/gi;
        IF @os linux OR @os darwin [ "release{$version}-win.zip" ] ELSE [ "" ];
        [
            @os window => $file_name = release{$version}-win.zip;
            @os linux => $file_name = release{$version}-linux.zip;
            @os darwin => $file_name = release{$version}-darwin.zip;
        ];
        @os window => [
            @cd something
            zip ./release/unpacked-win ${file_name};
            @cd ..
        ];
        @os linux => tgz ./release/unpacked-linux ${file_name};
        @os darwin => tgz ./release/unpacked-mac ${file_name};
    ]
    collect [
        $files = @read_as_lines ./some_file;
        EACH($file) $files [
            tgz ./release/{$file};
        ]
        $files = @ls ./path > @as_lines;
        EACH($file) $files [
            IF $file != "." AND $file != ".." [
                tgz ./release/{$file};
            ]
        ]
    ]
    lint [:TS:lint]

#[client: ./client]
    /// Client (HTML + JS client files)
    @hash 
        [./src, ./dist, :shared]
        [build(dev)];
    build($mode: dev | prod) [
        /// Buildind client 
        /// $mode
        /// [dev] build developing (no JS optimization) version
        /// [prod] build production version
        !@exists ./node_modules => yarn install ;
        @remove? ./dist;
        $mode == dev => yarn run build;
        $mode == prod => yarn run prod;
    ]
    lint [:TS:lint]

#[shared: ./shared]
    /// Common utils/libs/defs for client, app and wrapper
    @hash 
        [./src, ./dist]
        [build];
    build [
        /// Compile
        !@exists ./node_modules => yarn install;
        yarn run build;
    ]
    prod [
        /// Compile & cleanup node_modules for production
        :self:build;
        @remove? ./node_modules;
        yarn install --production;
    ]
    lint [:TS:lint]
        
#[module: ./core/module]
    /// Rust core of application
    @hash [./src];
    lint [:RUST:lint]
    test [:RUST:test]

#[binding: ./core/binding]
    /// Compiler of index.node with rust core application
    @hash 
        [./src, ./dist, :module]
        [build];
    build [
        nj-cli build --release;
    ]
    lint [:RUST:lint]
    test [:RUST:test]

#[wrapper: ./core/wrapper]
    /// Rust core wrapped into TypeScript module
    @hash 
        [./src, ./dist, :binding]
        [build];
    build [
        /// Compile
        !@exists ./node_modules => yarn install;
        :binding:build;
        @copy ../binding/dist/index.node ./dist;
        yarn run build;
    ]
    prod [
        /// Compile & cleanup node_modules for production
        :self:build;
        @remove? ./node_modules;
        yarn install --production;
    ]
    lint [:TS:lint]
