use std::fmt;

#[derive(Debug, Clone, PartialEq, Eq, Hash, Copy)]
pub enum ElementId {
    Call,
    Accessor,
    Function,
    If,
    IfCondition,
    IfSubsequence,
    IfThread,
    Each,
    Breaker,
    First,
    Join,
    VariableAssignation,
    Compute,
    Optional,
    Gatekeeper,
    Reference,
    PatternString,
    VariableName,
    Comparing,
    Combination,
    Subsequence,
    Condition,
    Values,
    Block,
    Meta,
    Command,
    Task,
    Component,
    Integer,
    Boolean,
    VariableDeclaration,
    VariableVariants,
    VariableType,
    SimpleString,
    Range,
    For,
    Return,
    Error,
    Incrementer,
    Loop,
    While,
    Closure,
    Conclusion,
    #[allow(unused)]
    Comment,
}

impl fmt::Display for ElementId {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "{}",
            match self {
                Self::Call => "Call",
                Self::Accessor => "Accessor",
                Self::Function => "Function",
                Self::If => "If",
                Self::IfCondition => "IfCondition",
                Self::IfSubsequence => "IfSubsequence",
                Self::IfThread => "IfThread",
                Self::Each => "Each",
                Self::Breaker => "Breaker",
                Self::First => "First",
                Self::Join => "Join",
                Self::VariableAssignation => "VariableAssignation",
                Self::Optional => "Optional",
                Self::Gatekeeper => "Gatekeeper",
                Self::Reference => "Reference",
                Self::PatternString => "PatternString",
                Self::VariableName => "VariableName",
                Self::Comparing => "Comparing",
                Self::Combination => "Combination",
                Self::Subsequence => "Subsequence",
                Self::Condition => "Condition",
                Self::Values => "Values",
                Self::Block => "Block",
                Self::Meta => "Meta",
                Self::Command => "Command",
                Self::Task => "Task",
                Self::Component => "Component",
                Self::Integer => "Integer",
                Self::Boolean => "Boolean",
                Self::VariableDeclaration => "VariableDeclaration",
                Self::VariableVariants => "VariableVariants",
                Self::VariableType => "VariableType",
                Self::SimpleString => "SimpleString",
                Self::Range => "Range",
                Self::For => "For",
                Self::Return => "Return",
                Self::Error => "Error",
                Self::Compute => "Compute",
                Self::Incrementer => "Incrementer",
                Self::Loop => "Loop",
                Self::While => "While",
                Self::Closure => "Closure",
                Self::Conclusion => "Conclusion",
                Self::Comment => "Comment",
            },
        )
    }
}
