$dev = @envvar(DEV_MODE);
$file = "release{$version}-win.zip";
$file = "release{$version}-{@env::is_os}.zip";
$file = "release{@ls(./path/*.txt; ./another\ path\ with\ spaces/path)}-win.zip";
$dev = @read_as_string(./package.json) >> @find(/\"version\":\ \"([\d\.])\"/gi);
$dev = @read_as_string(./package.json) >> @find(/\"version\":\ \"([\d\.])\"/gi) >> @filter(123);
$dev = @read_as_string(./package.json) >> @another(0) >> @onemore(111) >> @lastone(222);
$file_name = [@env::is_os(windo2w) => "release{$version}-win.zip";@env::is_os(linux) => "release{$version}-linux.zip";@env::is_os(darwin) => "release{$version}-darwin.zip";];
$file_name = [@env::is_os(windo2w) => "release{$version}-win.zip";@env::is_os(linux) => "release{$version}-linux.zip";@env::is_os(darwin) => "release{$version}-darwin.zip";];
$file_name = FIRST [@env::is_os(window) => "release{$version}-win.zip";@env::is_os(linux) => "release{$version}-linux.zip";@env::is_os(darwin) => "release{$version}-darwin.zip";@exit(1; "Unsupported OS: {@env::is_os}");];
$file_name = FIRST [@env::is_os(window) => "release{$version}-win.zip";@env::is_os(linux) => "release{$version}-linux.zip";@env::is_os(darwin) => "release{$version}-darwin.zip";@exit(1; "Unsupported OS: {@env::is_os}");];
$values = ("one"; "two"; "three");
$values = ($one; $two; $three);
$var1 = @functionA("arg1");
$var2 = "This is a pattern string with {$var1}";
$var3 = ($value1; $value2; @functionB("arg2"));
$var4 = IF $var1 == "expectedValue" [@functionC("arg3");];
$var5 = FIRST [@osCheck("windows") => "win-path";@osCheck("linux") => "linux-path";];
$var6 = ["Block item 1";$var2;@functionD("arg4");];
$var7 = $var1 != "unexpectedValue";
$var8 = @functionE("arg5") >> @functionF("arg6");
$var9 = "Nested {@functionG($var2)}";
$var10 = ($nested1; "nestedString{$var9}"; @nestedFunction("arg7"));
$var11 = IF (@functionH("arg8") == $var3) && ($var4 != "mismatch") ["Condition met";];
$var12 = FIRST [@environment("prod") => "production";@environment("dev") => "development";];
$var13 = [@check("condition1") => `action1`;];
$var14 = "Simple string";
$var15 = @functionI($var6; "arg9");
$var16 = ($var14; $var15; "extraValue");
$var17 = IF @var7 ["True case";] ELSE ["False case";];
$var18 = `Command with {$var8}`;
$var19 = @functionJ("start{$var17}end");
$var20 = "End with {$var19}";
$var21 = ["Block with mixed {$var20}";@functionK("blockArg");];
$var22 = FIRST [@status("success") => "Success action";@status("fail") => "Fail action";];
$var23 = "Pattern {$var22}";
$var24 = @chain1($var21) >> @chain2("chainArg");
$var25 = ($var23; "anotherValue"; @functionL("arg10"));
$var26 = IF $var24 != "unexpected" ["Correct flow";];
$var27 = "String with nested {@functionM($var25)}";
$var28 = ["Block level 2";$var27;@functionN("arg11");];
$var29 = FIRST [@option1("val1") => "Option1 action";@option2("val2") => "Option2 action";];
$var30 = "Final string {$var29}";
$var31 = @functionO("arg12") >> @functionP("arg13");
$var32 = ($var30; "value32"; @functionQ("arg14"));
$var33 = IF $var31 == "expected" ["All good";];
$var34 = `Command pattern {$var32}`;
$var35 = @functionR($var28; "arg15");
$var36 = "Wrap up {$var35}";
$var37 = [@trigger("event1") => @var36;"Static block item";];
$var38 = FIRST [@case1("val3") => "Case1 action";@case2("val4") => "Case2 action";];
$var39 = "Concatenation {$var38}";
$var40 = @chain3($var37) >> @chain4("arg16");
$var41 = ($var39; @functionS("arg17"); "value41");
$var42 = IF $var40 != "error" ["Success flow";];
$var43 = "Complex string with {$var42}";
$var44 = ["Nested block";$var43;@functionT("arg18");];
$var45 = FIRST [@scenario1 => "Scenario1 action";@scenario2 => "Scenario2 action";];
$var46 = "End pattern {$var45}";
$var47 = @functionU($var44; "arg19");
$var48 = ($var46; "finalValue"; @functionV("arg20"));
$var49 = IF $var47 == "done" ["Completed";];
$var50 = `Final command with {$var49}`;
$var1 = @functionA("arg1");
$var2 = "This is a string with injection {$var1}";
$var3 = @compare($var1; "value");
$var4 = IF $var3 ["Condition met";] ELSE ["Condition not met";];
$var5 = `command --option {$var1}`;
$var6 = ($var1; $var2; "Literal string");
$var7 = 42;
$var8 = true;
$var9 = $var7 == 42;
$var10 = IF $var8 ["Boolean is true";];
$var11 = "String with multiple {$injections} and {$var1}";
$var12 = `command with {$injection}"`;
$var13 = FIRST [@check("A") => $var1;@check("B") => "fallback";];
$var14 = @functionB($var6; $var7);
$var15 = @functionC("Nested {$var14}");
$var16 = $var8 != false;
$var17 = [$var1;$var2;$var3;];
$var18 = "Complex {$var17}";
$var19 = IF $var9 && $var16 ["Both conditions are true";];
$var20 = @functionD($var19; "Another argument");
$var21 = $var7 > 100;
$var22 = IF $var21 [@actionIfTrue;] ELSE [@actionIfFalse;];
$var23 = "Pattern {@functionE($var22)}";
$var24 = `command {$var8}`;
$var25 = @functionF("arg"; $var8; $var9);
$var26 = "String with boolean {$var16}";
$var27 = @functionG($var26; "Another string");
$var28 = FIRST [@env::is_os("Windows") => "WinPath";@env::is_os("Linux") => "LinuxPath";];
$var29 = "This is {@env::is_os("Windows")}";
$var30 = [$var25;$var27;$var28;];
$var31 = "End of {@env::is_os("Windows")} {$var30}";
$var32 = IF $var16 || $var21 ["One of the booleans is true";];
$var33 = @functionH($var32; $var31);
$var34 = `command with pattern {$var33}`;
$var35 = (42; false; "Mix of types");
$var36 = "String with {$var35}";
$var37 = @functionI($var36; 100);
$var38 = $var7 < $var37;
$var39 = IF $var38 ["var7 is less than var37";];
$var40 = "Final string with {$var39}";
$var41 = `final command --with {$var40}`;
$var42 = @functionJ("arg"; true; false);
$var43 = "String with function result {$var42}";
$var44 = [$var42;$var43;"Another element";];
$var45 = IF $var44 ["Array condition met";];
$var46 = `command based on {$var45}`;
$var47 = @functionK($var46; "Last arg");
$var48 = "Almost there {$var47}";
$var49 = `penultimate command {$var48}`;
$var50 = "The last variable {$var49}";