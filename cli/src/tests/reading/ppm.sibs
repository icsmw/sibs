check("value").is_ok();
check("value").as_string();
process().as_number();
process().as_number().and().next();
process().as_numbers()[2];
process().as_numbers()[$index];
process().as_numbers()[get_index()];
validate($some_var).is_ok();
validate($some_var).as_string();
validate("input").as_number();
execute("command").as_bool();
execute("command").and().is_success();
execute("command").get_status();
get_data().filter_by("criteria").as_list();
get_data().filter_by("criteria").as_list()[0];
get_data().filter_by("criteria").as_list()[$item_index];
transform().apply().as_number();
transform().apply().as_number().and().is_positive();
transform().apply().as_number().and().not().is_negative();
fetch("url").as_json();
fetch("url").as_json().and().is_valid();
fetch("url").as_json()[123];
fetch("url").as_json()[$key];
fetch("url").as_json()[get_key()];
parse("text").as_list();
parse("text").as_list()[0];
parse("text").as_list()[$text_index];
retrieve($var).as_object();
retrieve($var).as_object().and().has_key("key");
retrieve($var).as_object()[123];
retrieve($var).as_object()[$dynamic_key];
compute().as_number();
compute().as_number().and().is_even();
compute().as_number().and().is_odd();
compute().as_number().and().is_prime();
analyze("data").as_report();
analyze("data").as_report().and().is_complete();
analyze("data").as_report()[123];
analyze("data").as_report()[$section];
analyze("data").as_report()[get_section()];
map_data().with("mapping").as_dict();
map_data().with("mapping").as_dict()[123];
map_data().with("mapping").as_dict()[$entry_key];
map_data().with("mapping").as_dict()[get_entry_key()];
format($var).as_string();
format($var).as_string().and().is_uppercase();
format($var).as_string().and().is_lowercase();
process_input().as_list();
process_input().as_list()[3];
process_input().as_list()[$input_index];
process_input().as_list()[get_input_index()];
execute_task().as_result();
execute_task().as_result().and().is_ok();
execute_task().as_result()[123];
execute_task().as_result()[$result_key];
execute_task().as_result()[get_result_key()];
combine($var1, $var2).as_string();
combine($var1, $var2).as_string().and().contains("text");
combine($var1, $var2).as_string().and().starts_with("prefix");
combine($var1, $var2).as_string().and().ends_with("suffix");
merge_data().as_map();
merge_data().as_map()[123];
merge_data().as_map()[$merge_key];
merge_data().as_map()[get_merge_key()];
filter_list().with("criteria").as_filtered();
filter_list().with("criteria").as_filtered()[0];
filter_list().with("criteria").as_filtered()[$filtered_index];
filter_list().with("criteria").as_filtered()[get_filtered_index()];
calculate().as_number();
calculate().as_number().and().is_positive();
calculate().as_number().and().is_negative();
calculate().as_number().and().is_zero();
query($var).as_bool();
query($var).as_bool().and().is_true();
query($var).as_bool().and().is_false();
inspect().as_details();
inspect().as_details()[123];
inspect().as_details()[$info_key];
inspect().as_details()[get_info_key()];
check_condition().as_bool();
check_condition().as_bool().and().is_true();
check_condition().as_bool().and().is_false();
get_data().as_list();
get_data().as_list()[4];
get_data().as_list()[$list_index];
get_data().as_list()[get_list_index()];
apply_transformation().as_object();
apply_transformation().as_object()[123];
apply_transformation().as_object()[$field_key];
apply_transformation().as_object()[get_field_key()];