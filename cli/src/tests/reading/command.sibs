`release{$version}-win.zip`;
`release-linux.zip`;
`release{$version}-win.zip`;
`release-\`linux.zip`;
`release{$version}bla{$a}-win.zip`;
`release\`{$version}\`bla\`{$a}\`-win.zip`;
`release{$version}bla{$a}-win.zip{$b}`;
`release\`{$version}\`bla\`{$a}\`-win.zip{$b}`;
`{$c}release{$version}bla{$a}-win.zip{$b}`;
`\`{$c}\`release\`{$version}\`bla\`{$a}\`-win.zip{$b}`;
`release\`\{$version\}\`-win.zip`;
`release{env::is_os()}-win.zip`;
`release{env::is_os(windows)}-win.zip`;
`release{ls(./path/*.txt)}-win.zip`;
`release{ls(./path/*.txt; ./another/path)}-win.zip`;
`release{ls(./path/*.txt; ./another\ path\ with\ spaces/path)}-win.zip`;
`build --project {$project_name}`;
`deploy --to {$environment}`;
`test --filter "UnitTests"`;
`rollback --to {$previous_version}`;
`start --service {$service_name}`;
`stop --service "Database"`;
`restart --service {$service_name} --force`;
`status --service "WebServer"`;
`log --service {$service_name} --last "100 lines"`;
`configure --option "verbose" --level {$verbosity_level}`;
`backup --database {$database_name} --destination "/backups/"`;
`restore --from "/backups/{$backup_file}"`;
`check --url {$website_url}`;
`ping --destination "8.8.8.8"`;
`curl --request GET --url {$api_endpoint}`;
`download --url "http://example.com/file.zip" --output "{$download_path}"`;
`upload --file "{$file_to_upload}" --to "http://example.com/upload"`;
`scan --path "/var/www" --type "malware"`;
`encrypt --file "{$file_path}" --key {$encryption_key}`;
`decrypt --file "{$encrypted_file}" --key {$decryption_key}`;
`compress --source "{$source_folder}" --destination "{$archive_name}.zip"`;
`extract --file "{$compressed_file}" --path "/extract/"`;
`mount --device "/dev/sda1" --mountpoint "/data"`;
`unmount --path "/data"`;
`format --device "/dev/sda1" --type "ext4"`;
`partition --device "/dev/sdb" --size "100GB"`;
`useradd --name {$user_name}`;
`userdel --name "tempUser"`;
`chmod --permissions "755" --path "{$file_path}"`;
`chown --owner "{$user_name}" --path "/home/{$user_name}"`;
`firewall --add-rule --port "80" --action "allow"`;
`network --interface "eth0" --ip "{$ip_address}"`;
`route --add --net "192.168.1.0/24" --gateway "{$gateway_ip}"`;
`ssh --host "{$remote_host}" --command "uptime"`;
`rsync --source "{$local_path}" --destination "{$remote_user}{$remote_host}:{$remote_path}"`;
`git clone {$repository_url} --branch "{$branch_name}"`;
`npm install {$package_name}`;
`docker run --name "web_container" --image "{$docker_image}"`;
`ansible-playbook "{$playbook}" --inventory "{$inventory_file}"`;
`terraform apply --var "project={$project_name}"`;
`kubectl apply --filename "{$k8s_config}"`;
`vagrant up`;
`apache2ctl restart`;
`mysql --execute "SHOW DATABASES;"`;
`psql --command "SELECT * FROM users;"`;
`python3 {$script_name}.py`;
`java -jar "{$jar_file}"`;
`go run {$go_file}.go`;
`ruby {$ruby_script}.rb`;
`node {$node_script}.js`;
`deploy --env={$environment} --version={get_version($project)}`;
`backup --database={$database_name} --output="/backups/{today()}-{$database_name}.bak"`;
`notify --message="Deployment of {$project} to {$environment} was {status("successful"; "failed")}"`;
`rollback --to={find_previous_version($project; $current_version)} --force`;
`monitor --service={$service_name} --alert={threshold_exceeded("CPU"; 80)}`;
`analyze --log={$log_file} --pattern="{escape_regex($search_pattern)}"`;
`sync --source={$source_dir} --destination={$backup_dir}/{format_date(now; "YYYYMMDD")}`;
`scan --path="/data/{$customer_id}" --type={choose("malware"; "vulnerability")}`;
`generate-report --name="{$user_name}_{current_date()}.pdf" --data-source={$report_data_file}`;
`create-user --name={$user_name} --role={if $is_admin == "true" ["admin";] else ["user";]}`;
`set-permission --path="/projects/{$project_id}" --level={map_role_to_permission($user_role)}`;
`resize-image --source="{$image_path}" --dimensions="{calculate_new_dimensions($width; $height; "50%")}"`;
`archive-logs --source="/var/log/{$service_name}/" --since="{date_subtract(now; "30d")}" --output="/archives/{$service_name}_logs.tar.gz"`;
`update-dns --record="www.{$domain}" --type="A" --value="{get_ip($server_name)}"`;
`renew-certificate --domain={$domain} --method={if $auto_renew == "true" ["auto";] else ["manual";]}`;
`run-script --file="/scripts/{$script_name}.sh" --args="{concat($arg1; $arg2; $arg3)}"`;
`fetch-data --query="{encode_url("SELECT * FROM users WHERE status = 'active'")}" --database-url={$database_url}`;
`compile-code --source="{$project_dir}/src" --target="{$project_dir}/build" --flags="{join_paths($flag1; $flag2; "--optimize")}"`;
`transform-data --input="{$data_file}" --transformation="/transformations/{$transformation_id}.py" --params="{serialize($param1; $param2; $param3)}"`;
`send-request --url="{$api_endpoint}" --headers="Authorization: Bearer {get_token($api_key)}" --body="{json_encode($request_body)}"`;
`plot-graph --data-file="{$data_file}" --output="{$output_dir}/graph_{timestamp()}.png" --title="{$graph_title}" --type="{select_graph_type($graph_type)}"`;
`batch-process --job="{$job_name}" --input-dir="/input/{$batch_id}" --output-dir="/output/{$batch_id}" --config="{load_config($job_config_file)}"`;
`schedule-meeting --participants="{list_to_csv($participants)}" --datetime="{format_datetime($meeting_date; $meeting_time)}" --agenda="{$agenda}" --location="{if $virtual == "true" ["Zoom";] else [$meeting_room;]}"`;
`export-database --name={$database} --tables="{list_to_csv(filter_tables($database; $include_tables))}" --exclude-tables="{list_to_csv(filter_tables($database; $exclude_tables))}" --format={$export_format}`;
`update --force --path /var/www/\`site\``;
`backup --database {$db_name} --output "/backups/\`{$db_name}\`.sql"`;
`restore --from "/backups/\`{$backup_file}\`" --database {$db_name}`;
`scan --path "/home/\`{$user_name}\`/documents" --type "virus"`;
`deploy --service {$service_name} --env "production" --tag "\`{$deploy_tag}\`"`;
`rollback --service "web_app" --to-version "\`{$previous_version}\`"`;
`notify --message "Deployment of \`\`{$service_name}\`\` completed"`;
`log --service {$service_name} --since "\`1 hour ago\`" --grep "ERROR"`;
`ssh {$user_name}{$host} --command "ls -la \`\`/etc/\`config\`\`\`"`;
`mount --device "/dev/sda1" --type "ext4" --options "rw,\`noatime\`"`;
`usermod --lock {$user_name} --comment "Temporarily \`\`locked\`\` by admin"`;
`firewall --add-rule --source "192.168.1.100/24" --protocol "TCP" --port "\`80\`" --action "accept"`;
`network --interface "eth0" --set "ip \`\`{$ip_address}\`\` netmask \`\`255.255.255.0\`\`"`;
`route --add --destination "0.0.0.0/0" --gateway "\`{$gateway_ip}\`" --metric "100"`;
`ansible-playbook "\`{$playbook_path}\`" --extra-vars "user=\`{$user_name}\` host=\`{$inventory_host}\`"`;
`docker exec -it {$container_name} /bin/bash -c "apt-get update && apt-get install -y \`\`curl\`\`"`;
`kubectl exec {$pod_name} --namespace "\`{$namespace}\`" -- /bin/sh -c "echo \`\`Hello World\`\`"`;
`vagrant ssh --command "cd /vagrant && npm run \`\`build\`\``;
`python3 -c "import sys; print(\`sys.version\`)"`;
`go run {$go_file}.go --flag "value with \`escaped\` backtick"`;
`java -Djava.security.egd=file:/dev/./urandom -jar "\`{$spring_boot_jar}\`"`;
`node -e "console.log(\`This is a test\`);"`;
`ruby -e "puts \`\`Hello from Ruby\`\``;
`php -r "\`echo 'Hello from PHP';\`"`;
`grep -Ril --include=\`*.log\` "ERROR" /var/log/\`app\``;
`find /data -type f -name "\`*.bak\`" -exec rm -f \{\} \;`;
`tar -czvf "\`{$archive_name}\`.tar.gz" /data/\`folder\``;
`zip -r "\`{$zip_name}\`.zip" /var/www/\`html\``;
`mysql -u {$db_user} -p{$db_pass} -e "SELECT * FROM \`users\` WHERE \`active\`=1"`;
`psql -U {$db_user} -d {$db_name} -c "COPY (SELECT * FROM \`\`public\`\`.accounts) TO STDOUT WITH CSV HEADER"`;
`ffmpeg -i {$input_file} -vf "scale=iw/2:ih/2" \`\`{$output_file}\`\``;
`convert {$input_image} -resize 50% \`\`{$output_image}\`\``;
`rsync -avz --exclude=\`node_modules\` /source/\`project\` /dest/\`backup\``;
`netstat -tuln | grep "\`:$port\`"`;
`awk -F':' '{print($1)}' /etc/passwd | sort | uniq -c | sort -nr | head -n 5`;
`sed -i 's/original/\`new\`/g' \`\`{$config_file}\`\``;
`watch -n 5 "cat /proc/\`{$pid}\`/status"`;
`diff <(command1) <(command2)`;
`convert image.jpg -pointsize 24 -fill blue -annotate +100+100 'Text with \`backtick\``;
`curl --request POST --url {$api_endpoint} --header "Content-Type: application/json" --data "\`\"key\": \"value\"\`"`;